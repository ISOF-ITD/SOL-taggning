q
actual
expected
expected == actual
c
actual
expected
expected == actual
c
q
c
q
actual
expected
expected == actual
c
q
@currelem.to_s
n
reformat_head
c
actual
expected
expected == actual
expected == actuall
c
reformat_head
c
q
s
reformat_head
c
reformat_head
q
actual
expected
expected == actual
c
actual
expected
expected == actual
c
actual
expected
expected == actual
c
actual
expected
expected == actual
q
expected
actual
actual.to_s
c
actual
expected
c
@currelem.to_s
n
@currelem.to_s
n
@currelem.to_s
@currelem
n
@currelem.root.to_s
n
@currelem.root.to_s
reformat_head
q
c
@currelem.to_s
n
@currelem.root.to_s
@currelem.to_s
span_element.to_s
n
span_element.to_s
span
n
reformat_head
n
self
s
n
s
q
n
c
n
@r.wtext
s
c
n
reformat_head
element.each_element('w:r/w:t') { }.join
element.to_s
@r.wtext
r.wtext
c
unword(element)
element
formatted
c
actual.length.times { |n| puts n unless actual[n] == expected[n] }
expected == actual
actual
expected
q
actual
expected
c
actual
expected
c
actual
expected
c
actual
expected
c
actual
expected
c
actual
expected
expected == actual
q
location_element.text
location_element
c
actual
expected
expected == actual
c
expected
expected == actual
c
solig.unword(bro).to_s
c
actual[455..486]
expected[455..486]
expected[752].ord
expected[413].ord
actual[88..93]
expected[88..93]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual
expected
expected == actual
c
actual
expected
expected == actual
c
actual
expected
actual == expected
c
expected == actual
c
actual
expected
expected == actual
c
actual
expected
expected == actual
c
expected == actual
expeted == actual
c
actual[668]
expected[668]
actual[447..454]
expected[447..454]
actual.length.times { |n| puts n unless expected[n] == actual[n] }
expected == actual
actual
expected
c
actual[72]
expected[72]
actual.length.times { |n| puts n unless expected[n] == actual[n] }
actual
expected
c
actual
expected
c
actual[583..589]
acual[583..589]
expected[583..589]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
expected == actual
c
actual[692..693]
expected[692..693]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
expected == actual
c
actual[209..255]
expected[209..255]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
expected == actual
c
actual[545..567]
expected[545..567]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual[102..127]
expected == actual
c
actual[102..127]
expected[102..127]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
c
expected[400..520]
actual[400..520]
actual[400..480]
actual[400..440]
expected[400..440]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
c
actual == expected
c
expected[333].ord
actual[333].ord
expected[333]
actual[333]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
actual
expected
c
actual
actual == expected
expected
c
expected[278].ord
actual[278].ord
actual.length.times { |n| puts n unless expected[n] == actual[n] }
actual == expected
c
actual
expected
c
q
c
q
actual
c
r.wtext
rs.count
c
rs.count
c
rs.count
