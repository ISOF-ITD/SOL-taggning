q
expected[540..-1]
expected.length
formatted.to_s[540..-1]
formatted.to_s.length
formatted.to_s[579..-1]
expected[579..-1]
expected.length.times { |n| puts n unless expected[n] == formatted.to_s[n] }
expected == formatted.to_s
expected = "<div><head>Ucklum</head> <p><span type='locale'>sn</span>, <span type='locale'>tätort</span>, <location><district type='härad'>Inlands Nordre hd</district><region type='landskap'>Bohuslän</region></location>. <span style='italic'>Auklanda kirkia</span> 1388. – Socknen har fått sitt namn efter kyrkbyn (numera tätort). Det kan vara identiskt med det från sydvästra Norge kända <span style='italic'>Aukland</span>, som har antagits innehålla ett ord med betydelsen ’ökat eller tillfogat land, nyodling’. Det är här i så fall fråga om en mycket tidig nyodling till byn Grössby.</p></div>"
c
q
formatted.to_s[557..586]
expected[557..586]
expected[464]
expected[n]
expected.length.times { |n| puts n unless expected[n] == formatted.to_s[n] }
expected == formatted.to_s
expected = "<div><head>Ucklum</head> <p><span type='locale'>sn</span>, <span type='locale'>tätort</span>, <location><district type='härad'>Inlands Nordre hd</district><region type='landskap'>Bohuslän</region></location>. <span style='italic'>Auklanda kirkia</span> 1388. – Socknen har fått sitt namn efter kyrkbyn (numera tätort). Det kan vara identiskt med det från sydvästra Norge kända <span style='italic'>Aukland</span>, som har antagits innehålla ett ord med betydelsen ‘ökat eller tillfogat land, nyodling’. Det är här i så fall fråga om en mycket tidig nyodlinge till byn Grössby.</p></div>"
expected == actual
q
locale =~ /^\s*([^\s]+)\s*/
locale
n
locale =~ /^\s*([^\s]+)\s*/
!locale.strip.is_landskap
c
!locale.strip.is_landskap
locale =~ /^\s*([^\s]+)\s*/
q
c
locale =~ /^\s*([^\s]+)\s*/
!locale.strip.is_landskap
c
!locale.strip.is_landskap
locale =~ /^\s*([^\s]+)\s*/
q
locale
n
locale =~ /^\s*([^\s]+)\s*$/
locale
n
locale
locale.strip.is_landskap
locale =~ /^\s*([^\s]+)\s*$/
locale
c
locale
q
locale.is_landskap
locale =~ /^\s*([^\s]+)\s*$/
locale
n
locale =~ /^\s*([^\s]+)\s*$/
locale =~ /^\s([^\s]+)\s*$/
locale =~ /^\s*([^\s]+)\s*$/
locale =~ /([^\s]+)/
locale
locale =~ /^\s([^\s]+)\s*$/
locale.is_landskap
locale
locale =~ /^\s([^\s]+)\s*/
state
q
start
q
REXML::XPath.first(r, 'w:t').text
c
REXML::XPath.first(r, 'w:t').text
c
REXML::XPath.first(r, 'w:t').text
c
REXML::XPath.first(r, 'w:t').text
c
REXML::XPath.first(r, 'w:t').text
c
REXML::XPath.first(r, 'w:t').text
REXML::XPath.first(r, 'w:r/w:t').text
c
q
start
n
start
n
state
c
state
c
state
q
puts r.to_s
state
c
puts r.to_s
state
c
puts r.to_s
r.text
state
c
state
q
c
puts r.to_s
r.to_s
c
q
c
start
n
div.to_s
div
carryover
q
location
locale
c
location
locale
c
location
locale
c
location
locale
c
location
locale
q
location
locale
n
location
locale
inlocale
q
location
c
actual == expected
q
actual[425]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
q
actual[417..444]
expected[417..444]
actual == expected
c
foo.strip!
foo = ' foo '
expected[417..444]
actual[417..444]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual[329..350]
actual == expected
q
actual[329..350]
expected[329..350]
expected[283..300]
actual[283..300]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
c
expected == actual
quit
actual
expected[241..260]
actual[241..260]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
q
separator
tail
q
location_element.to_s
location_element
p.to_s
q
p.to_s
c
p.to_s
p
q
p.to_s
q
p.to_s
p.to-s
location_element.to_s
c
location_element.to_s
c
location_element.to_s
location_element.to-s
location
q
p.to_s
p
n
loc =~ /\s$/
loc
index
c
ct
index
c
ct
index
q
expected[200..230]
expected[210..230]
actual[210..230]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
expected[141..160]
actual[141..160]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual.length.times { |n| puts c unless actual[n] == expected[n] }
actual.length.times { |c| puts c unless actual == expected }
actual ==expected
c
q
location
loc
p.to_s
p
separator
tail
c
quit
formatted = solig.unword(p.root.elements.first).to_s
expected = "<div><head>Bro</head> <p><span type='locale'>sn</span>, <location><district type='skeppslag'>Bro och Vätö skg</district><region type='landskap'>Uppland</region></location> → <span style='italic'>Roslags-Bro</span>.</p></div>"
c
3.times { }
expected.length
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
q
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected == formatted.to_s
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
q
expected[259]
formatted.to_s[259]
formatted.to_s[260]
expected[260]
expected.length
formatted.to_s
expected
formatted.to_s[111..121]
expected[111..121]
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected == formatted.to_s
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
q
tail
