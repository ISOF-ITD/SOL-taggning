c
actual[583..589]
acual[583..589]
expected[583..589]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
expected == actual
c
actual[692..693]
expected[692..693]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
expected == actual
c
actual[209..255]
expected[209..255]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
expected == actual
c
actual[545..567]
expected[545..567]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual[102..127]
expected == actual
c
actual[102..127]
expected[102..127]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
c
expected[400..520]
actual[400..520]
actual[400..480]
actual[400..440]
expected[400..440]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
c
actual == expected
c
expected[333].ord
actual[333].ord
expected[333]
actual[333]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
actual
expected
c
actual
actual == expected
expected
c
expected[278].ord
actual[278].ord
actual.length.times { |n| puts n unless expected[n] == actual[n] }
actual == expected
c
actual
expected
c
q
c
q
actual
c
r.wtext
rs.count
c
rs.count
c
rs.count
c
@currelem.parent.to_s
@currelem.parentto_s
@currelem.to_s
r.wtext
n
$1
n
@currtext
@currelem.to_s
n
@currelem.to_s
$1.is_locale?
n
@currtext
n
@currtext
n
r.wtext
n
r.wtext
@currelem.to_s
@currtext
r.wtext
locale
r.wtext
n
@currtext
@currext
r.wtext
c
@state
r.wtext
c
q
actual
expected
q
actual[300..350]
expected[300..350]
actual[80..100]
expected[80..100]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual
expected
c
actual
expected
q
c
actual
atual
expected
c
actual
expected
q
c
r.isitalic?
@state
r.wtext
c
n
element.each_element('w:r/w:t') { }.join
element
eleemnt
r.wtext
@currelem.to_s
n
@currelem.to_s
n
@state
r.isitalic?
@currtext
@currelem.texts
@currelem.text
r.text
r.texts
r.respond_to? :texts
r.wtext
r.text_bit
@currelem.to_s
c
@currelem.to_s
c
actual
expected
expected == actual
c
expected == actual
actual
expected
c
actual
expected
c
actual
expected
c
actual
expected == actual
expected
q
copy
escape
q
c
q
@@escape_sequences.reverse
@@escape_sequences
q
c
'a f.d. b'.gsub 'f.d.', '\\fd'
Regexp.new abbrev
abbrev
q
n
text
q
rs.count
rs.ocunt
element.each_element('w:r/w:t') { }.join
puts r.to_s
r.wtext
q
abbekås.each_element('w:r/w:t') { }.join
abbekås.each_element('w:r/w:t') { }.joib
abbekås
abbekåß
actual
expected
expected == actual
c
q
actual
expected
c
actual
expected
c
element.each_element('w:r/w:t') { }.join
element
bt
r.isitalic?
@currtext
r.wtext
c
r.wtext
puts r.to_s
r.wtext
rs.count
n
puts r.to_s
rs.count
r.wtext
@currtext
c
r.wtext
@currtext
c
ps[4302].each_element("w:r/w:t") { }.join
ps[4301].each_element("w:r/w:t") { }.join
ps[4300].each_element("w:r/w:t") { }.join
ps[4299].each_element("w:r/w:t") { }.join
ps[444].each_element("w:r/w:t") { }.join
ps.count
ps = sol2.root.elements.first.elements
sol2 = Document.new File.read 'SOL2-from-docx-with-edits.xml'
sol2 = Document.new 'SOL2-from-docx-with-edits.xml'
r.wtext
puts r.to_s
puts -
r.to_s
c
q
c
q
c
xml.to_s == expected
xml.to_s
loc.remove
loc.to_s
loc = XPath.first(xml, '//location')
xml = Document.new actual
expected == actual
actual
expected
q
