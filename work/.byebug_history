c
q
location
loc
p.to_s
p
separator
tail
c
quit
formatted = solig.unword(p.root.elements.first).to_s
expected = "<div><head>Bro</head> <p><span type='locale'>sn</span>, <location><district type='skeppslag'>Bro och Vätö skg</district><region type='landskap'>Uppland</region></location> → <span style='italic'>Roslags-Bro</span>.</p></div>"
c
3.times { }
expected.length
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
q
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected == formatted.to_s
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
q
expected[259]
formatted.to_s[259]
formatted.to_s[260]
expected[260]
expected.length
formatted.to_s
expected
formatted.to_s[111..121]
expected[111..121]
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected == formatted.to_s
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
q
tail
n
tail
separator
location
n
start
q
formatted.to_s
expected
formatted.to_s[111..133]
formatted.to_s[111.133]
expected[111..133]
formatted.to_s[122.130]
expected[122..130]
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected.length.times { |n| puts n if expected[n] != formatted.to_s[15] }
formatted.to_s[15].ord
expected[15].ord
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
expected[15].ord
q
headword
c
headword
q
formatted.to_s[15].ord
expected[15].ord
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
quit
@uspaces
r1 = /#{@uspaces}*/
q
formatted.to_s[15].ord
expected[15] == formatted.to_s[15]
expected[15] == formatted.to_s[16]
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
continue
REXML::XPath.first(oxie.root.elements.first.elements[2], 'w:t').text.ord
REXML::XPath.first(oxie.root.elements.first.elements[2], 'w:t').text
REXML::XPath.first(oxie.root.elements.first, 'w:r/w:t').text
REXML::XPath.first(oxie.root.elements.first, 'w:r/w:t')
REXML::XPath.first(oxie.root.elements.first, 'w:r')
REXML::XPath.first(oxie.root.elements.first.elements, 'w:p')
oxie.root.elements.first.elements
REXML::XPath.first(oxie.root.elements.first, 'w:p')
REXML::XPath.new(oxie.root.elements.first, 'w:p')
REXML::XPath(oxie.root.elements.first, 'w:p')
oxie
formatted.to_s[15].ord
formatted.to_s[15]
expected[15]
expected[10..20]
formatted.to_s[10..20]
formatted.to_s
formatted.to_s.length.times { |n| if formatted.to_s[n] != expected[n] then puts n end }
formatted
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
quit
qut
8195.to_s(16)
ox.each_char { |c| puts c.ord }
ox.each_char { |c| puts c }
ox.each_char { |c| puts }
ox.each { |c| puts c }
ox.strip
ox = headword + REXML::XPath.first(r, 'w:t').text
ox = _
headword + REXML::XPath.first(r, 'w:t').text
(headword + REXML::XPath.first(r, 'w:t').text).strip
REXML::XPath.first(r, 'w:t').text
headword
q
actual.to_s
actual.to_s[110..192]
expected[110..192]
expected[110]
actual.to_s.length.times { |n| if actual.to_s[n] != expected[n] then puts n end }
actual.to_s
actual = solig.unword(p.root.elements.first)
expected = "<div><head>Bro</head> <p><span type='locale'>sn</span>, <location><district type='skeppslag'>Bro och Vätö skg<district><region type='landskap'>Uppland</region></location> → <span style='italic'>Roslags-Bro</span>.</p></div>"
expected = '<div><head>Bro</head> <p><span type='locale'>sn</span>, <location><district type='skeppslag'>Bro och Vätö skg<district><region type='landskap'>Uppland</region></location> → <span style='italic'>Roslags-Bro</span>.</p></div>'
q
index
location
loc
q
s.strip =~ /^foo$/
s = ' foo '
location
locale_element
locale_element.to_s
p locale_element.to_s
locale_element
locale
n
locale
n
location
q
c
n
q
location
q
type
tag
n
name
locale
index
loc
q
continue
location
puts p.to_s
p
c
state
c
n
p.text
n
puts r.to_s
n
state
c
n
state
c
q
state
c
n
REXML::XPath.first(r, 'w:t').text.strip == ''
puts r.to_s
state
c
state
q
state
puts r.to_s
c
puts r.to_s
c
puts r.to_s
c
q
REXML::XPath.first(r, 'w:t').text.split == ''
REXML::XPath.first(r, 'w:t').text
n
puts r.to_s
state
c
puts r.to_s
state
quit
eval n
c
eval n
c
n
puts r.to_s
eval n
q
element
up
up 3
bt
element
locale
c
locale
c
locale
c
sol.instance_variable_get :@errors
proc.batch element
sol.instance_variable_get :@errors
q
element.class
element.elements.count { |p| p.name == 'p' }
element.elements.select { |p| p.name == 'p' }.count
element.elements.count
element
c
q
sol.elements.count
sol.elements
sol
sol.root
sol
File.expand_path '../SOL2.xml', __FILE__
sol.root
sol.root.elements[2]
sol.root.elements[2].elements[2].elements[2].elements[74]
sol
q
File.expand_path '../../SOL2.xml', __FILE__
sol.root
element = sol.root.elements[2]
element = sol.root.elements[2].elements[2]
element = sol.root.elements[2].elements[2].elements[2]
q
element
locale
q
out.to_s[260..367]
expected[260..367]
expected.length.times { |n| puts n if expected[n] != out.to_s[n] }
expected == out.to_s
expected = "<root><div><head><placeName>Vákkudavárre</placeName></head> <p><span type='locale'>fjäll</span>, <location><district type='socken'>Gällivare sn</district><region type='landskap'>Lappland</region></location></p></div><figure><graphic url='bilder/image_1234.jpg' /></figure><div><head><placeName>Vaksala</placeName></head> <p><span type='locale'>sn</span>, <location><district type='härad'>Vaksala hd</district><region type='landskap'>Uppland</region></location></p></div></root>"
expected = "<root><div><head><placeName>Vákkudavárre</placeName></head> <p><span type='locale'>fjäll</span>, <location><district type='socken'>Gällivare sn</district><region type='landskap'>Lappland</region></location></p></div><figure><graphic url='bilder/image_1234.jpg' /></figure><div><head><placeName>Vaksala</placeName></head> <p><span type='locale'>sn</span>, <location><district type='härad'>Vaksala hd</district><region type='landskap'>Uppland</region></location></p></div></root>
expected =<<_EOD_
quit
out.to_s[140..255]
expected[140..255]
expected.length.times { |n| puts n if expected[n] != out.to_s[n] }
out.to_s == expected
