q
location
locale
c
location
locale
c
location
locale
c
location
locale
c
location
locale
q
location
locale
n
location
locale
inlocale
q
location
c
actual == expected
q
actual[425]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
q
actual[417..444]
expected[417..444]
actual == expected
c
foo.strip!
foo = ' foo '
expected[417..444]
actual[417..444]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual[329..350]
actual == expected
q
actual[329..350]
expected[329..350]
expected[283..300]
actual[283..300]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
c
expected == actual
quit
actual
expected[241..260]
actual[241..260]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
q
separator
tail
q
location_element.to_s
location_element
p.to_s
q
p.to_s
c
p.to_s
p
q
p.to_s
q
p.to_s
p.to-s
location_element.to_s
c
location_element.to_s
c
location_element.to_s
location_element.to-s
location
q
p.to_s
p
n
loc =~ /\s$/
loc
index
c
ct
index
c
ct
index
q
expected[200..230]
expected[210..230]
actual[210..230]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
expected[141..160]
actual[141..160]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual.length.times { |n| puts c unless actual[n] == expected[n] }
actual.length.times { |c| puts c unless actual == expected }
actual ==expected
c
q
location
loc
p.to_s
p
separator
tail
c
quit
formatted = solig.unword(p.root.elements.first).to_s
expected = "<div><head>Bro</head> <p><span type='locale'>sn</span>, <location><district type='skeppslag'>Bro och Vätö skg</district><region type='landskap'>Uppland</region></location> → <span style='italic'>Roslags-Bro</span>.</p></div>"
c
3.times { }
expected.length
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
q
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected == formatted.to_s
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
q
expected[259]
formatted.to_s[259]
formatted.to_s[260]
expected[260]
expected.length
formatted.to_s
expected
formatted.to_s[111..121]
expected[111..121]
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected == formatted.to_s
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
q
tail
n
tail
separator
location
n
start
q
formatted.to_s
expected
formatted.to_s[111..133]
formatted.to_s[111.133]
expected[111..133]
formatted.to_s[122.130]
expected[122..130]
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected.length.times { |n| puts n if expected[n] != formatted.to_s[15] }
formatted.to_s[15].ord
expected[15].ord
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
expected[15].ord
q
headword
c
headword
q
formatted.to_s[15].ord
expected[15].ord
expected.length.times { |n| puts n if expected[n] != formatted.to_s[n] }
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
quit
@uspaces
r1 = /#{@uspaces}*/
q
formatted.to_s[15].ord
expected[15] == formatted.to_s[15]
expected[15] == formatted.to_s[16]
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
continue
REXML::XPath.first(oxie.root.elements.first.elements[2], 'w:t').text.ord
REXML::XPath.first(oxie.root.elements.first.elements[2], 'w:t').text
REXML::XPath.first(oxie.root.elements.first, 'w:r/w:t').text
REXML::XPath.first(oxie.root.elements.first, 'w:r/w:t')
REXML::XPath.first(oxie.root.elements.first, 'w:r')
REXML::XPath.first(oxie.root.elements.first.elements, 'w:p')
oxie.root.elements.first.elements
REXML::XPath.first(oxie.root.elements.first, 'w:p')
REXML::XPath.new(oxie.root.elements.first, 'w:p')
REXML::XPath(oxie.root.elements.first, 'w:p')
oxie
formatted.to_s[15].ord
formatted.to_s[15]
expected[15]
expected[10..20]
formatted.to_s[10..20]
formatted.to_s
formatted.to_s.length.times { |n| if formatted.to_s[n] != expected[n] then puts n end }
formatted
expected = "<div><head>Oxie härad</head> <p><span type='locale'>hd</span>, <location><region type='landskap'>Skåne</region></location>. <span style='italic'>Oshøgheret</span> ca 1300. – Häradet har namn efter kyrkbyn i socknen → <span style='italic'>Oxie</span>.</p></div>"
quit
qut
8195.to_s(16)
ox.each_char { |c| puts c.ord }
ox.each_char { |c| puts c }
ox.each_char { |c| puts }
ox.each { |c| puts c }
ox.strip
ox = headword + REXML::XPath.first(r, 'w:t').text
ox = _
headword + REXML::XPath.first(r, 'w:t').text
(headword + REXML::XPath.first(r, 'w:t').text).strip
REXML::XPath.first(r, 'w:t').text
headword
q
actual.to_s
actual.to_s[110..192]
expected[110..192]
expected[110]
actual.to_s.length.times { |n| if actual.to_s[n] != expected[n] then puts n end }
actual.to_s
actual = solig.unword(p.root.elements.first)
expected = "<div><head>Bro</head> <p><span type='locale'>sn</span>, <location><district type='skeppslag'>Bro och Vätö skg<district><region type='landskap'>Uppland</region></location> → <span style='italic'>Roslags-Bro</span>.</p></div>"
expected = '<div><head>Bro</head> <p><span type='locale'>sn</span>, <location><district type='skeppslag'>Bro och Vätö skg<district><region type='landskap'>Uppland</region></location> → <span style='italic'>Roslags-Bro</span>.</p></div>'
q
index
location
loc
q
s.strip =~ /^foo$/
s = ' foo '
location
locale_element
locale_element.to_s
p locale_element.to_s
locale_element
locale
n
locale
n
location
q
c
n
q
location
q
type
tag
n
name
locale
index
loc
q
