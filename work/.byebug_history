n
locale
n
state
r.text_bit
c
r.text_bit
c
r.text_bit
c
actual
c
actual
c
actual
c
div.to_s
c
q
p.to_s
div.to_s
n
tail
separator
location
n
r.text_bit
c
r.text_bit
c
r.text_bit
q
bit.text_bit
bit.elements.first.text_bit
bit.elements.first
bit
q
element.to_s
element.text
c
n
p.to_s
p
n
tail
location
n
s
r.text_bit
n
c
q
r.text_bit
n
state
c
state
c
r.text_bit
n
s
r.text_bit
r
n
r
n
r.text_bit
c
q
italic
n
r.isitalic?
n
r.text_bit
carryover
state
c
n
retvalue
n
state
n
p.to_s
n
separator
tail
r.text_bit
p.to_s
p
n
ct
n
r.text_bit
separator
location
n
r.text_bit
carryover
s
carryover
r.text_bit
r
p
n
carryover
r.text_bit
state
n
carryover
r.text_bit
c
r.text_bit
c
r.text_bit
c
state
r.text_bit
c
actual.length.times { |n| puts n unless expected[n] == actual[n] }
c
q
actual[256..284]
expected[256..284]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
carryover
q
carryover
p.to_s
p
c
n
carryover
c
p
q
formatted.to_s == expected
actual == formattted.to_s
c
q
c
actual
c
state
carryover
c
actual
actual == expected
c
q
c
actual == expected
c
location
n
location
n
location
locale
n
locale
n
tail
separator
location
n
div.to_s
n
div.to_s
p.to_s
n
r.text_bit
state
n
r.text_bit
c
state
r.text_bit
c
r.text_bit
c
actual
actual[118..127]
expected[118..127]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
c
actual == expected
q
actual[500..550]
expected[500..550]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
actual[444..555]
expected[444..555]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
actual[288..312]
expected[288..312]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
q
actual[191..255]
expected[191..255]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
actual[91..127]
expected[91..127]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
actual[79..97]
expected[79..97]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
actual[39..63]
expected[39..63]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual.length.times { |n| puts n unless actual[n] == formatted[n] }
actual == formatted
q
p.to_s
n
p.to_s
ct
n
location
n
state
carryover
r.text_bit
div.to_s
n
location
n
locale
location
n
location
n
locale
n
locale
location
n
location
n
$3
$2
$1
n
p.to_s
