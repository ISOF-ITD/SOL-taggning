q
@currtext
n
@currtext
r.text_bit
n
n.
r.text_bit
@carryover
n
@currelem.to_s
@currelem.to-s
n
r.text_bit
@carryover
@state
c
q
@state
c
q
@currtext
n
@currtext
n
@currelem.root.to_s
@currelem.to_s
r.text_bit
c
r.text_bit
@carryover
@currtext
@state
c
@state
q
c
q
@currtext
n
@currtext
@currtedxt
n
@currtext =~ /(.*?),/
@currtext =~ /,/
@currtext
n
XPath.first(@currelem.root, '//invalid')
XPath.first(@currelem.root, '/head')
XPath.first(@currelem.root, '//head')
XPath.first(@currelem.root, '//div')
@currelem.root.elements.first
@currelem.root
XPath.first(@currelem.root, '//div')
XPath.first(@currelem.root, '/div')
XPath.first(@currelem.root, '//p')
@currelem
@curreleme
XPath.first(@currelem, 'p')
XPath.first(@currelem.root, '/div')
XPath.first(@currelem.root, 'div')
@carryover
@currtext
n
@currelem.root.to_s
@currelem.to_s
@state
c
@currelem.to_s
@currelem.to-s
r.text_bit
@carryover
r.text_bit
c
@carryover
r.text_bit
c
@carryover
r.text_bit
q
actual
expected
c
q
r.text_bit
r.text_bi
n
@carryover
n
@carryover
n
location
n
location
@carryover
n
location
n
location
locale
n
locale
location
n
@carryover
r.text_bit
q
@carryover
n
@carryover
n
location
n
locale
location
n
@currelem.to_s
n
@currelem.to_s
n
location
locale.is_locale?
n
locale
n
locale
n
location
n
c
r.text_bit
c
r.text_bit
q
actual
expected == actual
q
c = @carryover
@carryover
n
@carryover
n
@carryover
q
@carryover
location
n
@carryover
r.text_bit
c
@carryover
r.text_bit
@carryover
c
@carryover
c
q
r.text_bit
@carryover
c
r.text_bit
@carryover
c
@carryover
r.text_bit
c
r.text_bit
@carryover
q
@currelem.root.to_s
@currelem.to_s
@carryover
r.text_bit
c
q
@carryover
n
location
n
location
locatoin
@carryover
n
@state
r.text_bit
c
@currelem.root.to_s
@state
r.text_bit
c
q
actual
expected
expected == actual
q
' Dalarna'.is_locale?
'Dalarna'.is_locale?
location.map(&:is_locale?)
location
locale.is_locale?
q
location
q
location.map(&:is_locale?)
location
locale.is_locale?
n
locale
bt
@currelem.parent.to_s
@currelem.parentto_s
@currelem.to_s
r.text_bit
q
c
r.isitalic?
r.text_bit
n
location
locale
first
n
@carryover
@currelem.to_s
r.text_bit
q
c
r.text_bit
@carryover
c
expected == actual
actual
expected
q
@carryover
n
@currelem.to_s
q
@currelem.to_s
r.text_bit
c
@currelem.to_s
r.text_bit
c
actual
expected
expected[127..155]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual
c
expected == actual
expected
actual
q
@carryover
c
