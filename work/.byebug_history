q
div.to_s
puts r.to_s
puts _
r.to_s
r.text_bit
c
q
expected[671].ord
actual[671].ord
actual[671].or
actual[671]
expected[671]
expected'']
expected[580..640]
actual[580..640]
actual[580..620]
expected[580..620]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
actual == expected
q
c
actual
expected
c
r.text_bit
c
div.to_s
r.text_bit
r.text|_bit
c
actual[100..150]
expected[100..150]
expected[100.150]
actual.length.times { |n| puts n unless expected[n] == actual[n] }
actual == expected
c
actual == expected
c
actual[400..440]
expected[400..440]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
expected[150..200]
actual[150..200]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual.length { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
div.to_s
c
div.to_s
c
p.to_s
div.to_s
c
q
div.to_s
state
locale
n
c
q
locale
n
locale
n
r.text_bit
c
q
carryover
location
div.to_s
r.text_bit
c
actual
expected
actual == expected
c
div.to_s
r.text_bit
r.isitalic?
c
r.isitalic?
div.to_s
r.text_bit
c
r.text_bit
div.to_s
c
div.to_s
c
div.to_s
c
div.to_s
c
div.to_s
c
div.to_s
n
div.to_s
c
n
locale
location
n
state
locale
div.to_s
c
q
locale
n
locale
n
state
r.text_bit
c
r.text_bit
c
r.text_bit
c
actual
c
actual
c
actual
c
div.to_s
c
q
p.to_s
div.to_s
n
tail
separator
location
n
r.text_bit
c
r.text_bit
c
r.text_bit
q
bit.text_bit
bit.elements.first.text_bit
bit.elements.first
bit
q
element.to_s
element.text
c
n
p.to_s
p
n
tail
location
n
s
r.text_bit
n
c
q
r.text_bit
n
state
c
state
c
r.text_bit
n
s
r.text_bit
r
n
r
n
r.text_bit
c
q
italic
n
r.isitalic?
n
r.text_bit
carryover
state
c
n
retvalue
n
state
n
p.to_s
n
separator
tail
r.text_bit
p.to_s
p
n
ct
n
r.text_bit
separator
location
n
r.text_bit
carryover
s
carryover
r.text_bit
r
p
n
carryover
r.text_bit
state
n
carryover
r.text_bit
c
r.text_bit
c
r.text_bit
c
state
r.text_bit
c
actual.length.times { |n| puts n unless expected[n] == actual[n] }
c
q
actual[256..284]
expected[256..284]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual == expected
c
carryover
q
carryover
p.to_s
p
c
n
carryover
c
p
q
formatted.to_s == expected
actual == formattted.to_s
c
q
