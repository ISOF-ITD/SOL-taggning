c
expected == actual
c
q
actual[200..220]
expected[200..220]
actual.length.times { |n| puts n unless expected[n] == actual[n] }
actual
expected
actual == expected
c
state
c
state
carryover
c
q
n
carryover
n
state
n
carryover
div.to_s
n
div.to_s
n
r.isbold?
state
n
r.text_bit
c
r.text_bit
q
r.text_bit
div.to_s
n
div.to_s
n
div.attributes
n
div.attributes
div.to_s
n
r.text_bit
c
r.text_bit
q
r.text_bit
c
r.text_bit
c
q
actual
expected
c
q
actual
expected
c
actual == expected
actual
q
actual
q
r.text_bit
r.isbold?
n
state
c
actual
actual == expected
c
actual
expected
actual == expected
c
x
c
actual
expected
actual == expected
c
solig.unword(w).to_s
c
solig.unword(w).to_s
c
q
solig.unword(w).to_s
_.to_s
solig.unword(w)
c
q
up
bt
c
actual
expected
c
expected == actual
q
c
r.text_bit
carryover
n
locale
location
n
r.text_bit
c
r.text_bit
c
r.text_bit
c
actual
expected
c
actual
expected
c
actual
expected
expected == actual
c
q
c
location
locatoin
locale
n
q
down
up
n
r.text_bit
c
state
c
n
state
r.text_bit
location
q
c
n
first
locale
c
actual
expected
expected == actual
c
expected == actual
q
expected[102].ord
expcted[102].ord
actual[90..110]
expected[90..110]
actual.length.times { |n| puts n unless actual[n] == expected[n] }
actual
expected
expected == actual
q
carryover
r.text_bit
p.text
c
p.text
n
div.to_s
p.text
n
p.text
p.to_s
n
div.to_s
n
div.to_s
div.text
n
div.text
n
div.text
div.to_s
carryover
c
q
div.text
n
r.text_bit
div.text
c
div.text
c
div.text
div.to-s
q
div.text
div.to_s
p.to_s
c
r.text_bit
c
p.to_s
c
actual
expected
expected == actual
c
actual
expected
actual == expected
q
actual
expected
expected == actual
c
actual
expected
c
q
c
n
locale
n
location
n
first
r.text_bit
location
n
q
r.text_bit
c
r.text_bit
q
n
r.text_bit
 c
q
carryover
r.text_bit
c
r.text_bit
c
q
carryover
c
n
tail
n
state
r.text_bit
c
actual
expected
