c
actual
q
carryover
carryover.strip!
carryover
q
locale_text
carryover
p.to_s
div.to_s
state
r.text_bit
q
r.text_bit
r.text_strip
headword
c
r.isbold?
r.text_bit
state
c
r.isbold?
r.text_bit
state
c
r.isbold?
r.text_bit
state
q
r.text_bit
state
c
n
headword
n
r.isbold?
n
r.text_bit
state
c
state
r.text_bit
c
r.text_bit
state
q
state
r.text_bit
q
ox[4].ord
q
ox.ustrip[4].ord
ox.ustrip[4]
ox.ustrip
q
headword[-1].ord
headword[-1]
headword.ustrip
headword
c
q
r.text_bit
r.isbold?
c
r.isbold?
r.text_bit
c
q
c
location.select { |loc| !loc.strip.empty? }
location.select { |loc| !loc.empty? }
location
n
r.text_bit
location
n
r.text_bit
p.to_s
c
n
p.to_s
n
p.to_s
div.to_s
locale
n
first
n
location
locale
n
div.to_s
p.to_s
n
state
n
r.text_bit
c
r.text_bit
c
r.text_bit
c
actual
expected == actual
expected
c
q
n
r.text_bit
c
r.text_bit
c
p.to_s
locale
n
location
locale
n
state
location
r.text_bit
state
div.to_s
c
n
locale
location
p.to_s
n
div.to_s
n
div.to_s
n
state
r.text_bit
c
r.text_bit
c
r.text_bit
state
c
q
actual
doc.to_s
doc.to_s[128..144]
actual[128..144]
actual.length.times { |n| puts n unless actual[n] == doc.to_s[n] }
actual.length { |n| puts n unless actual[n] == doc.to_s[n] }
actual == doc.to_s
doc.to_s
doc.root.add_attribute 'type', '?'
doc.root.add_attribute 'xml:id', 'Albano'
doc = REXML::Document.new expected
actual
expected
c
q
form.to_s
c
form.to_s
c
actual == expected
c
actual
expected
c
expected == actual
c
q
actual[200..220]
expected[200..220]
actual.length.times { |n| puts n unless expected[n] == actual[n] }
actual
expected
actual == expected
c
state
c
state
carryover
c
q
n
carryover
n
state
n
carryover
div.to_s
n
div.to_s
n
r.isbold?
state
n
r.text_bit
c
r.text_bit
q
r.text_bit
div.to_s
n
div.to_s
n
div.attributes
n
div.attributes
div.to_s
n
r.text_bit
c
r.text_bit
q
r.text_bit
c
r.text_bit
c
q
actual
expected
c
q
actual
expected
c
actual == expected
actual
q
actual
q
r.text_bit
r.isbold?
n
state
c
actual
actual == expected
c
actual
expected
actual == expected
c
x
c
actual
expected
actual == expected
c
solig.unword(w).to_s
c
solig.unword(w).to_s
c
q
solig.unword(w).to_s
_.to_s
