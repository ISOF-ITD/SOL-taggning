c
actual
expected
c
actual
expected == actual
expected
q
copy
escape
q
c
q
@@escape_sequences.reverse
@@escape_sequences
q
c
'a f.d. b'.gsub 'f.d.', '\\fd'
Regexp.new abbrev
abbrev
q
n
text
q
rs.count
rs.ocunt
element.each_element('w:r/w:t') { }.join
puts r.to_s
r.wtext
q
abbekås.each_element('w:r/w:t') { }.join
abbekås.each_element('w:r/w:t') { }.joib
abbekås
abbekåß
actual
expected
expected == actual
c
q
actual
expected
c
actual
expected
c
element.each_element('w:r/w:t') { }.join
element
bt
r.isitalic?
@currtext
r.wtext
c
r.wtext
puts r.to_s
r.wtext
rs.count
n
puts r.to_s
rs.count
r.wtext
@currtext
c
r.wtext
@currtext
c
ps[4302].each_element("w:r/w:t") { }.join
ps[4301].each_element("w:r/w:t") { }.join
ps[4300].each_element("w:r/w:t") { }.join
ps[4299].each_element("w:r/w:t") { }.join
ps[444].each_element("w:r/w:t") { }.join
ps.count
ps = sol2.root.elements.first.elements
sol2 = Document.new File.read 'SOL2-from-docx-with-edits.xml'
sol2 = Document.new 'SOL2-from-docx-with-edits.xml'
r.wtext
puts r.to_s
puts -
r.to_s
c
q
c
q
c
xml.to_s == expected
xml.to_s
loc.remove
loc.to_s
loc = XPath.first(xml, '//location')
xml = Document.new actual
expected == actual
actual
expected
q
location.to_s == '<location/>'
location.to_s
location.text
location = XPath.first(@currelem.root, '//location')
XPath.first(@currelem.root, 'location')
location
locatio
c
xml.to_s == expected
xml.to_s
p.to_s
p
loc.remove
p.remove(loc)
loc = XPath.first(xml.root.elements[2], 'location')
p[1]
p[0]
[0]
p[3]
p[2]
p[1]
p[2]
p.respond_to? :remove
p.respond_to? :remove_element
p.class
p = xml.root.elements[2]
XPath.first(xml.root.elements[2], 'location')
xml.root.elements[2]
xml.root.elements[2].elements[1].text
xml.root.elements[2].elements[1].name
xml.root.elements[2].to_s
xml.root.elements[2].to)s
xml.root.elements[2].elements[2].name
xml.root.elements[2].elements.last
xml.root.elements[2].elements[1].attribute('type').class
_.class
xml.root.elements[2].elements[1].attribute 'type'
xml.root.elements[2].elements[1].attributes['type']
xml.root.elements[2].elements[1].name
xml.root.elements[2].elements[1]
xml.root.elements[2].elements.count
xml.root.elements[2].name
xml.root.name
xml.name
xml.root.elements.first.name
xml = Document.new actual
actual
expected
c
@state
n
@state
n
c
q
@currtext
r.text_bit
rs.count
n
q
n
next
bt
c
@currtext =~ /^.*?,\s*/
@currtext =~ /,/
@currtext
c
q
@currtext
q
rs.count
n
rs.count
n
rs.count
q
@currelem.to_s
n
@currtext
n
r.text_bit
@currtext
@currelem.to_s
c
actual
expected
expectd
c
expected == actual
c
@currelem.to_s
@currtext
@carryover
r.text_bit
c
@currelem.to_s
rs.count
r
c
actual == expected
q
actual
expected == actual
c
q
y
w
c
formatted.to_s
c
@currelem.parent.to_s
@currelem.parent
@currelem
n
@state
n
rs.count
r.text_bit
@currelem.to_s
n
@currelem.root.to_s
@currelem.to_s
n
@carryover
@currelem.to_s
n
@currtext
@carryover
@state
r.text_bit
@currtext
3 ^ 5
3 ^ 1
3 ^ 2
false ^ false
true ^ true
true ^ false
false ^ true
false.respond_to? :^
false.respond_to? :^^
1 ^ 0
r.isitalic?
@carryover
@currtext
n
@state
r.text_bit
rs.count
@currelem.to_s
c
@currelem.to_s
c
@currelem.to_s
c
q
n
r.text_bit
rs.first.text_bit
rs.first.isitalic?
rs.first
n
@currtext
